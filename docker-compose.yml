services:
  # PostgreSQL Database with Northwind Schema
  postgres:
    image: postgres:15-alpine
    container_name: northwind-postgres
    restart: unless-stopped
    environment:
      POSTGRES_DB: northwind
      POSTGRES_USER: postgres
      POSTGRES_PASSWORD: postgres
    ports:
      - "5432:5432"
    volumes:
      - postgres_data:/var/lib/postgresql/data
      - ./database/init:/docker-entrypoint-initdb.d
      - ./database/config/postgresql.conf:/etc/postgresql/postgresql.conf
    command: postgres -c config_file=/etc/postgresql/postgresql.conf
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U postgres"]
      interval: 30s
      timeout: 10s
      retries: 5
    networks:
      - northwind-network

  # Redis Cache Layer
  redis:
    image: redis:7-alpine
    container_name: northwind-redis
    restart: unless-stopped
    ports:
      - "6379:6379"
    volumes:
      - redis_data:/data
      - ./cache/redis.conf:/usr/local/etc/redis/redis.conf
    command: redis-server /usr/local/etc/redis/redis.conf
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 30s
      timeout: 10s
      retries: 5
    networks:
      - northwind-network

  # Hasura GraphQL Engine
  hasura:
    image: hasura/graphql-engine:v2.36.0
    container_name: northwind-hasura
    restart: unless-stopped
    ports:
      - "8080:8080"
    environment:
      HASURA_GRAPHQL_DATABASE_URL: postgres://postgres:postgres@postgres:5432/northwind
      HASURA_GRAPHQL_ENABLE_CONSOLE: "true"
      HASURA_GRAPHQL_DEV_MODE: "true"
      HASURA_GRAPHQL_ENABLED_LOG_TYPES: startup, http-log, webhook-log, websocket-log, query-log
      HASURA_GRAPHQL_ADMIN_SECRET: "hasura-admin-secret"
      HASURA_GRAPHQL_REDIS_URL: redis://redis:6379
      HASURA_GRAPHQL_RATE_LIMIT_REDIS_URL: redis://redis:6379
      HASURA_GRAPHQL_ENABLE_REMOTE_SCHEMA_PERMISSIONS: "true"
      HASURA_GRAPHQL_EXPERIMENTAL_FEATURES: "inherited_roles"
      HASURA_GRAPHQL_ENABLE_METRICS: "true"
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy
    volumes:
      - ./hasura/metadata:/hasura-metadata
      - ./hasura/migrations:/hasura-migrations
    networks:
      - northwind-network

  # Performance Monitor & Test Runner
  performance-monitor:
    build:
      context: ./performance-monitor
      dockerfile: Dockerfile
    container_name: northwind-performance
    restart: unless-stopped
    ports:
      - "8000:8000"
    environment:
      POSTGRES_URL: postgres://postgres:postgres@postgres:5432/northwind
      HASURA_URL: http://hasura:8080/v1/graphql
      HASURA_ADMIN_SECRET: hasura-admin-secret
      REDIS_URL: redis://redis:6379
      PROMETHEUS_URL: http://prometheus:9090
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy
      hasura:
        condition: service_started
    volumes:
      - ./performance-monitor:/app
      - ./reports:/app/reports
      - ./logs:/app/logs
    networks:
      - northwind-network

  # Prometheus Metrics Collection
  prometheus:
    image: prom/prometheus:latest
    container_name: northwind-prometheus
    restart: unless-stopped
    ports:
      - "9090:9090"
    volumes:
      - ./monitoring/prometheus/prometheus.yml:/etc/prometheus/prometheus.yml
      - ./monitoring/prometheus/rules:/etc/prometheus/rules
      - prometheus_data:/prometheus
    command:
      - '--config.file=/etc/prometheus/prometheus.yml'
      - '--storage.tsdb.path=/prometheus'
      - '--web.console.libraries=/etc/prometheus/console_libraries'
      - '--web.console.templates=/etc/prometheus/consoles'
      - '--storage.tsdb.retention.time=200h'
      - '--web.enable-lifecycle'
    networks:
      - northwind-network

  # Grafana Dashboard
  grafana:
    image: grafana/grafana:latest
    container_name: northwind-grafana
    restart: unless-stopped
    ports:
      - "3000:3000"
    environment:
      GF_SECURITY_ADMIN_USER: admin
      GF_SECURITY_ADMIN_PASSWORD: admin
      GF_USERS_ALLOW_SIGN_UP: "false"
    volumes:
      - grafana_data:/var/lib/grafana
      - ./monitoring/grafana/provisioning:/etc/grafana/provisioning
      - ./monitoring/grafana/dashboards:/var/lib/grafana/dashboards
    depends_on:
      - prometheus
    networks:
      - northwind-network

  # PostgreSQL Exporter for Prometheus
  postgres-exporter:
    image: prometheuscommunity/postgres-exporter:latest
    container_name: northwind-postgres-exporter
    restart: unless-stopped
    environment:
      DATA_SOURCE_NAME: "postgresql://postgres:postgres@postgres:5432/northwind?sslmode=disable"
    ports:
      - "9187:9187"
    depends_on:
      postgres:
        condition: service_healthy
    networks:
      - northwind-network

  # Redis Exporter for Prometheus
  redis-exporter:
    image: oliver006/redis_exporter:latest
    container_name: northwind-redis-exporter
    restart: unless-stopped
    environment:
      REDIS_ADDR: redis://redis:6379
    ports:
      - "9121:9121"
    depends_on:
      redis:
        condition: service_healthy
    networks:
      - northwind-network

  # Node Exporter for System Metrics
  node-exporter:
    image: prom/node-exporter:latest
    container_name: northwind-node-exporter
    restart: unless-stopped
    ports:
      - "9100:9100"
    volumes:
      - /proc:/host/proc:ro
      - /sys:/host/sys:ro
      - /:/rootfs:ro
    command:
      - '--path.procfs=/host/proc'
      - '--path.rootfs=/rootfs'
      - '--path.sysfs=/host/sys'
      - '--collector.filesystem.mount-points-exclude=^/(sys|proc|dev|host|etc)($$|/)'
    networks:
      - northwind-network

networks:
  northwind-network:
    driver: bridge

volumes:
  postgres_data:
  redis_data:
  prometheus_data:
  grafana_data:
